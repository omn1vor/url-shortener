### Add an url with autogenerated code (will fail if done consequently with the test code generator)

POST http://localhost:8080/
Content-Type: application/json
Accept-Language: ru

{
  "url": "https://google.com",
  "email": "test@test.com",
  "creatorEmail": "test@test.org"
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### No URL

POST http://localhost:8080/
Content-Type: application/json
Accept-Language: ru

{
  "code": "validCode",
  "email": "test@test.com",
  "creatorEmail": "test@test.org"
}

> {%
    client.test("Request results in 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### No email

POST http://localhost:8080/
Content-Type: application/json
Accept-Language: ru

{
  "url": "https://google.com",
  "code": "validCode",
  "creatorEmail": "test@test.org"
}

> {%
    client.test("Request results in 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}


### Add an invalid url

POST http://localhost:8080/
Content-Type: application/json
Accept-Language: ru

{
  "url": "http://",
  "code": "wrongUrl",
  "email": "test@test.com",
  "creatorEmail": "test@test.org"
}

> {%
    client.test("Request results in 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}


### Add an url with given code for the first time - should be OK

POST http://localhost:8080/
Content-Type: application/json
Accept-Language: ru

{
  "code": "myCode",
  "url": "https://google.com",
  "email": "test@test.com",
  "creatorEmail": "test@test.org"
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Add an url with given code the second time: should not be OK

POST http://localhost:8080/
Content-Type: application/json
Accept-Language: ru

{
  "code": "myCode",
  "url": "https://google.com",
  "email": "test@test.com",
  "creatorEmail": "test@test.org"
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Add/overwrite an url with given code

PUT http://localhost:8080/myCode2
Content-Type: application/json

{
  "url": "https://google.com",
  "email": "test@test.com",
  "creatorEmail": "test@test.org"
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Url is set", function() {
        client.assert(response.body.hasOwnProperty("url"), "Cannot find 'url' in response");
        client.assert(response.body.url == "https://google.com", "URL is not set");
    });
%}

### Patch url (ru)

PATCH http://localhost:8080/myCode
Content-Type: application/json-patch+json
Accept-Language: ru

{
  "url": "https://new-google.com",
  "author": {
    "email": "test-new@test.org"
  }
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Url is set", function() {
        client.assert(response.body.hasOwnProperty("url"), "Cannot find 'url' in response");
        client.assert(response.body.url == "https://new-google.com", "URL is not set");
    });
%}

### Patch wrong code (ru)

PATCH http://localhost:8080/wrong
Content-Type: application/json-patch+json
Accept-Language: ru

{
  "url": "https://new-google.com",
  "author": {
    "email": "test-new@test.org"
  }
}

> {%
    client.test("Request resulted in status 404", function() {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}

### Trying to change an illegal field (ru)

PATCH http://localhost:8080/myCode
Content-Type: application/json-patch+json
Accept-Language: ru

{
  "code": "111",
  "url": "https://new-google.com",
  "author": {
    "email": "test-new@test.org"
  }
}

> {%
    client.test("Request resulted in status 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Trying to change an illegal field

PATCH http://localhost:8080/myCode
Content-Type: application/json-patch+json

{
  "code": "111",
  "url": "https://new-google.com",
  "author": {
    "email": "test-new@test.org"
  }
}

> {%
    client.test("Request resulted in status 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Trying to change with a field our entity doesn't have

PATCH http://localhost:8080/myCode
Content-Type: application/json-patch+json

{
  "secret": "111",
  "url": "https://new-google.com",
  "author": {
    "email": "test-new@test.org"
  }
}

> {%
    client.test("Request resulted in status 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Getting redirect to the link (warning, wordy output)

GET http://localhost:8080/myCode2
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Getting redirect to deactivated link

GET http://localhost:8080/herm
Content-Type: application/json

> {%
    client.test("Request resulted in 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}


### Getting audit events for an url code

GET http://localhost:8080/myCode/events
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Getting audit events for wrong url (should work too, just resulting in empty array)

GET http://localhost:8080/wrong/events
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Getting users

GET http://localhost:8080/users
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length >= 2);
    });
%}

### Getting the count of user's links

GET http://localhost:8080/users/hermione@thatschool.com
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body >= 2);
    });
%}

### Getting all URLs by email, new first (default)
GET http://localhost:8080/users/hermione@thatschool.com/links
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length >= 2);
        client.assert(response.body[0].created > response.body[1].created);
    });
%}

### Getting all URLs by email, old first
GET http://localhost:8080/users/hermione@thatschool.com/links?sort=asc
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length >= 2);
        client.assert(response.body[0].created < response.body[1].created);
    });
%}

### Getting all URLs by email, wrong sort parameter
GET http://localhost:8080/users/hermione@thatschool.com/links?sort=dunno
Content-Type: application/json
Accept-Language: ru

> {%
    client.test("Request resulted in status 400", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}